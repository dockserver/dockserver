#!/bin/bash
####################################
# All rights reserved.              #
# started from Zero                 #
# Docker owned dockserver           #
# Docker Maintainer dockserver      #
#####################################
#####################################
# THE DOCKER ARE UNDER LICENSE      #
# NO CUSTOMIZING IS ALLOWED         #
# NO REBRANDING IS ALLOWED          #
# NO CODE MIRRORING IS ALLOWED      #
#####################################
# shellcheck disable=SC2086
# shellcheck disable=SC2006
if [[ $EUID != 0 ]]; then
    sudo "$0" "$@"
    exit $?
fi
dockserver=/opt/dockserver
run() {
if [[ -d ${dockserver} ]];then
   envmigra && fastapt && cleanup && clear
   $(command -v cd) ${dockserver} && $(command -v bash) install.sh
else
   usage
fi
}
####
update() {
dockserver=/opt/dockserver
clear
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "    🚀    DockServer [ UPDATE CONTAINER ] STARTED"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
     basefolder="/opt/appdata"
     compose="compose/docker-compose.yml"
     $(command -v rsync) ${dockserver}/dockserver/docker.yml $basefolder/$compose -aqhv
     if [[ -f $basefolder/$compose ]];then
        $(command -v cd) $basefolder/compose/ && docker-compose config 1>/dev/null 2>&1
        $(command -v cd) $basefolder/compose/ && docker-compose down 1>/dev/null 2>&1
        $(command -v docker) system prune -af 1>/dev/null 2>&1
        $(command -v cd) $basefolder/compose/ && docker-compose up -d --force-recreate 1>/dev/null 2>&1
     fi
     $(command -v chown) -cR 1000:1000 ${dockserver} 1>/dev/null 2>&1
     envmigra && fastapt && cleanup && clear
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "    🚀    DockServer [ UPDATE CONTAINER ] DONE"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
}
####
dev() {
dockserver=/opt/dockserver
clear
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "    🚀    DockServer [ DEV - CLONING ] STARTED"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
     $(command -v rm) -rf ${dockserver}
     git clone --quiet -b dev https://github.com/dockserver/dockserver.git ${dockserver}
     $(command -v chown) -cR 1000:1000 ${dockserver} 1>/dev/null 2>&1
     envmigra && fastapt && cleanup && clear
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "    🚀    DockServer [ DEV - CLONING ] DONE"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
}

fastapp() {
APP=${APP}
  cd /opt/dockserver/
  APP=$(find apps/ -type f -name "${APP}.*" )
  compose="compose/docker-compose.yml"
  appfolder="/opt/dockserver"
  basefolder="/opt/appdata"

     rm -rf $basefolder/$compose
     rsync $appfolder/${APP} $basefolder/$compose -aqhv && true || exit 0
     cd $basefolder/compose
     docker-compose config && echo Good || exit
     docker-compose up -d --force-recreate && echo Good || exit 

  exit

}

####
usage() {
clear
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "    🚀    DockServer [ USAGE COMMANDS ]"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "   Commands :"
echo ""
echo "   dockserver -i / --install     =   open the dockserver setup"
echo "   dockserver -h / --help        =   help/usage"
echo "   dockserver -u / --update      =   deployed the update container"
echo ""
echo "   dockserver -q / --app         =   fast app installation"
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "    🚀    DockServer [ USAGE COMMANDS ]"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

}

envmigra() {
basefolder="/opt/appdata"
dockserver="/opt/dockserver"
envmigrate="$dockserver/apps/.subactions/envmigrate.sh"
if [[ -f "$basefolder/compose/.env" ]];then
   $(command -v bash) $envmigrate
fi 
}
fastapt() {
if ! type aria2c >/dev/null 2>&1; then
   apt-get update -y && apt-get install --force-yes -y -qq aria2
fi
if ! [[ -f /etc/apt-fast.conf ]]; then
      bash -c "$(curl -sL https://raw.githubusercontent.com/ilikenwf/apt-fast/master/quick-install.sh)"
      echo debconf apt-fast/maxdownloads string 16 | debconf-set-selections
      echo debconf apt-fast/dlflag boolean true | debconf-set-selections
      echo debconf apt-fast/aptmanager string apt | debconf-set-selections
fi
}
cleanup() {
   find /var/log -type f -regex ".*\.gz$" -delete
   find /var/log -type f -regex ".*\.[0-9]$" -delete
}

DOCK=$1
APP=$2

case "$DOCK" in
 "" ) run ;;
 "-i" ) run ;;
 "--install" ) run ;;
 "-u" ) update ;;
 "--update" ) update ;;
 "-a" ) fastapp ;;
 "--app" ) fastapp ;;
 "-h" ) usage ;;
 "--help" ) usage ;;

esac

#E-o-F#
